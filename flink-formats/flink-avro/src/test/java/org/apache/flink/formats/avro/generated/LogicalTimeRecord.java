/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.formats.avro.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LogicalTimeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3857568806787806667L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogicalTimeRecord\",\"namespace\":\"org.apache.flink.formats.avro.generated\",\"fields\":[{\"name\":\"type_timestamp_millis\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"type_date\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"type_time_millis\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMillisConversion());
  }

  private static final BinaryMessageEncoder<LogicalTimeRecord> ENCODER =
      new BinaryMessageEncoder<LogicalTimeRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogicalTimeRecord> DECODER =
      new BinaryMessageDecoder<LogicalTimeRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LogicalTimeRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LogicalTimeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LogicalTimeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogicalTimeRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LogicalTimeRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LogicalTimeRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LogicalTimeRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LogicalTimeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.time.Instant type_timestamp_millis;
   private java.time.LocalDate type_date;
   private java.time.LocalTime type_time_millis;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogicalTimeRecord() {}

  /**
   * All-args constructor.
   * @param type_timestamp_millis The new value for type_timestamp_millis
   * @param type_date The new value for type_date
   * @param type_time_millis The new value for type_time_millis
   */
  public LogicalTimeRecord(java.time.Instant type_timestamp_millis, java.time.LocalDate type_date, java.time.LocalTime type_time_millis) {
    this.type_timestamp_millis = type_timestamp_millis.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.type_date = type_date;
    this.type_time_millis = type_time_millis.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type_timestamp_millis;
    case 1: return type_date;
    case 2: return type_time_millis;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.DateConversion(),
      new org.apache.avro.data.TimeConversions.TimeMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type_timestamp_millis = (java.time.Instant)value$; break;
    case 1: type_date = (java.time.LocalDate)value$; break;
    case 2: type_time_millis = (java.time.LocalTime)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type_timestamp_millis' field.
   * @return The value of the 'type_timestamp_millis' field.
   */
  public java.time.Instant getTypeTimestampMillis() {
    return type_timestamp_millis;
  }


  /**
   * Sets the value of the 'type_timestamp_millis' field.
   * @param value the value to set.
   */
  public void setTypeTimestampMillis(java.time.Instant value) {
    this.type_timestamp_millis = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'type_date' field.
   * @return The value of the 'type_date' field.
   */
  public java.time.LocalDate getTypeDate() {
    return type_date;
  }


  /**
   * Sets the value of the 'type_date' field.
   * @param value the value to set.
   */
  public void setTypeDate(java.time.LocalDate value) {
    this.type_date = value;
  }

  /**
   * Gets the value of the 'type_time_millis' field.
   * @return The value of the 'type_time_millis' field.
   */
  public java.time.LocalTime getTypeTimeMillis() {
    return type_time_millis;
  }


  /**
   * Sets the value of the 'type_time_millis' field.
   * @param value the value to set.
   */
  public void setTypeTimeMillis(java.time.LocalTime value) {
    this.type_time_millis = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new LogicalTimeRecord RecordBuilder.
   * @return A new LogicalTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder newBuilder() {
    return new org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder();
  }

  /**
   * Creates a new LogicalTimeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogicalTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder newBuilder(org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder other) {
    if (other == null) {
      return new org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder();
    } else {
      return new org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder(other);
    }
  }

  /**
   * Creates a new LogicalTimeRecord RecordBuilder by copying an existing LogicalTimeRecord instance.
   * @param other The existing instance to copy.
   * @return A new LogicalTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder newBuilder(org.apache.flink.formats.avro.generated.LogicalTimeRecord other) {
    if (other == null) {
      return new org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder();
    } else {
      return new org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for LogicalTimeRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogicalTimeRecord>
    implements org.apache.avro.data.RecordBuilder<LogicalTimeRecord> {

    private java.time.Instant type_timestamp_millis;
    private java.time.LocalDate type_date;
    private java.time.LocalTime type_time_millis;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type_timestamp_millis)) {
        this.type_timestamp_millis = data().deepCopy(fields()[0].schema(), other.type_timestamp_millis);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type_date)) {
        this.type_date = data().deepCopy(fields()[1].schema(), other.type_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type_time_millis)) {
        this.type_time_millis = data().deepCopy(fields()[2].schema(), other.type_time_millis);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing LogicalTimeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.formats.avro.generated.LogicalTimeRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type_timestamp_millis)) {
        this.type_timestamp_millis = data().deepCopy(fields()[0].schema(), other.type_timestamp_millis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type_date)) {
        this.type_date = data().deepCopy(fields()[1].schema(), other.type_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type_time_millis)) {
        this.type_time_millis = data().deepCopy(fields()[2].schema(), other.type_time_millis);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type_timestamp_millis' field.
      * @return The value.
      */
    public java.time.Instant getTypeTimestampMillis() {
      return type_timestamp_millis;
    }


    /**
      * Sets the value of the 'type_timestamp_millis' field.
      * @param value The value of 'type_timestamp_millis'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder setTypeTimestampMillis(java.time.Instant value) {
      validate(fields()[0], value);
      this.type_timestamp_millis = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type_timestamp_millis' field has been set.
      * @return True if the 'type_timestamp_millis' field has been set, false otherwise.
      */
    public boolean hasTypeTimestampMillis() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type_timestamp_millis' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder clearTypeTimestampMillis() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type_date' field.
      * @return The value.
      */
    public java.time.LocalDate getTypeDate() {
      return type_date;
    }


    /**
      * Sets the value of the 'type_date' field.
      * @param value The value of 'type_date'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder setTypeDate(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.type_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type_date' field has been set.
      * @return True if the 'type_date' field has been set, false otherwise.
      */
    public boolean hasTypeDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type_date' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder clearTypeDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type_time_millis' field.
      * @return The value.
      */
    public java.time.LocalTime getTypeTimeMillis() {
      return type_time_millis;
    }


    /**
      * Sets the value of the 'type_time_millis' field.
      * @param value The value of 'type_time_millis'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder setTypeTimeMillis(java.time.LocalTime value) {
      validate(fields()[2], value);
      this.type_time_millis = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type_time_millis' field has been set.
      * @return True if the 'type_time_millis' field has been set, false otherwise.
      */
    public boolean hasTypeTimeMillis() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type_time_millis' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.LogicalTimeRecord.Builder clearTypeTimeMillis() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogicalTimeRecord build() {
      try {
        LogicalTimeRecord record = new LogicalTimeRecord();
        record.type_timestamp_millis = fieldSetFlags()[0] ? this.type_timestamp_millis : (java.time.Instant) defaultValue(fields()[0]);
        record.type_date = fieldSetFlags()[1] ? this.type_date : (java.time.LocalDate) defaultValue(fields()[1]);
        record.type_time_millis = fieldSetFlags()[2] ? this.type_time_millis : (java.time.LocalTime) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogicalTimeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogicalTimeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogicalTimeRecord>
    READER$ = (org.apache.avro.io.DatumReader<LogicalTimeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










